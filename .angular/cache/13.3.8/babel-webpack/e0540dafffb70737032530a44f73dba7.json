{"ast":null,"code":"import { AuthorizationService } from './authorization.service';\nimport * as i0 from \"@angular/core\";\n/**\n * @description\n *\n * Interceptor que pega a requisição html e insere no header o token.\n */\n\nexport let AuthorizationInteceptor = /*#__PURE__*/(() => {\n  class AuthorizationInteceptor {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    intercept(original_request, next) {\n      let requestResult;\n\n      if (this.isUrlNeedsProAuth(original_request.url)) {\n        requestResult = this.appendTokenToRequest(original_request);\n      } else {\n        requestResult = original_request.clone();\n      }\n\n      return next.handle(requestResult);\n    }\n\n    appendTokenToRequest(request) {\n      const authService = this.injector.get(AuthorizationService);\n      const token = authService.getAuthenticatedUser().token;\n      return request.clone({\n        headers: request.headers.set('x-access-token', token)\n      });\n    }\n\n    isUrlNeedsProAuth(url) {\n      let needProAuth = true;\n      const whiteList = [/login/, /assets/];\n\n      for (const whiteUrl of whiteList) {\n        if (url.search(whiteUrl) >= 0) {\n          needProAuth = false;\n          break;\n        }\n      }\n\n      return needProAuth;\n    }\n\n  }\n\n  AuthorizationInteceptor.ɵfac = function AuthorizationInteceptor_Factory(t) {\n    return new (t || AuthorizationInteceptor)(i0.ɵɵinject(i0.Injector));\n  };\n\n  AuthorizationInteceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizationInteceptor,\n    factory: AuthorizationInteceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizationInteceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst CACHE_KEY_TOKEN = 'TOKEN';\nconst TOKEN_ENDPOINT = `${environment.api}/user/login`;\nexport let AuthorizationService = /*#__PURE__*/(() => {\n  class AuthorizationService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    requestToken(user) {\n      return this.http.post(TOKEN_ENDPOINT, {\n        userName: user.userName,\n        password: user.password\n      }, {\n        observe: 'response'\n      });\n    }\n\n    login(user) {\n      const loginSubject = new Subject();\n      this.requestToken(user).subscribe(response => {\n        const {\n          body: loggedUser\n        } = response;\n        loggedUser.token = response.headers.get('x-access-token');\n        this.saveUserInfo(loggedUser);\n        loginSubject.next(loggedUser);\n      }, error => {\n        loginSubject.error(error);\n      });\n      return loginSubject.asObservable();\n    }\n\n    saveUserInfo(user) {\n      this._user = user;\n      this.setUser(this._user);\n    }\n    /**\n     * Efetua o logout do usuário autenticado.\n     */\n\n\n    logout() {\n      this._user = undefined;\n      this.removeUser();\n    }\n\n    setUser(user) {\n      sessionStorage.setItem(CACHE_KEY_TOKEN, JSON.stringify(user));\n    }\n\n    removeUser() {\n      sessionStorage.removeItem(CACHE_KEY_TOKEN);\n    }\n\n    getAuthenticatedUser() {\n      return this._user || JSON.parse(sessionStorage.getItem(CACHE_KEY_TOKEN));\n    }\n\n    isUserAuthenticated() {\n      return this.getAuthenticatedUser() !== null;\n    }\n\n  }\n\n  AuthorizationService.ɵfac = function AuthorizationService_Factory(t) {\n    return new (t || AuthorizationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthorizationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizationService,\n    factory: AuthorizationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizationService;\n})();","map":null,"metadata":{},"sourceType":"module"}